From f7b8ad691e9eee0d8f4464f6df429a0c293e09e8 Mon Sep 17 00:00:00 2001
From: vivekmodi1301 <modivivek03@gmail.com>
Date: Tue, 19 Mar 2024 18:00:44 +0530
Subject: [PATCH] Task 3 completed

---
 package.json           |  2 +-
 src/DataManipulator.ts | 30 +++++++++++++++++++++---------
 src/Graph.tsx          | 31 ++++++++++++++++++-------------
 3 files changed, 40 insertions(+), 23 deletions(-)

diff --git a/package.json b/package.json
index 8ca3a60..98295c9 100644
--- a/package.json
+++ b/package.json
@@ -18,7 +18,7 @@
     "react-scripts": "2.1.3"
   },
   "scripts": {
-    "start": "react-scripts --openssl-legacy-provider start",
+    "start": "react-scripts start --openssl-legacy-provider",
     "build": "react-scripts build",
     "test": "react-scripts test",
     "eject": "react-scripts eject"
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index 7f62295..11c177e 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,32 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
-  timestamp: Date,
+  price_abc:number,
+  price_def:number,
+  ratio:number,
+  timestamp:Date,
+  upper_bound:number,
+  lower_bound:number,
+  trigger_alert:number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]) {
-    return serverResponds.map((el: any) => {
+  static generateRow(serverRespond: ServerRespond[]): Row {
+    const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price) / 2;
+    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price) / 2;
+    const ratio = priceABC / priceDEF;
+    const upperBound = 1 + 0.05;
+    const lowerBound = 1 - 0.05;
       return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
+        price_abc : priceABC,
+        price_def : priceDEF,
+        ratio,
+        timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp ?
+          serverRespond[0].timestamp : serverRespond[1].timestamp,
+        upper_bound:upperBound,
+        lower_bound: lowerBound,
+        trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined,
       };
-    })
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 277797d..03abd88 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,5 +1,5 @@
 import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
+import { Table, TableData } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import { DataManipulator } from './DataManipulator';
 import './Graph.css';
@@ -23,10 +23,13 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
+      price_abc:'float',
+      price_def:'float',
+      ratio:'float',
+      timestamp:'date',
+      upper_bound:'float',
+      lower_bound:'float',
+      trigger_alert:'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +39,25 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["ratio","lower_bound","upper_bound","trigger_alert"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
-        timestamp: 'distinct count',
+          price_abc:'avg',
+          price_def:'avg',
+          ratio:'avg',
+          timestamp:'distinct count',
+          upper_bound:'avg',
+          lower_bound:'avg',
+          trigger_alert:'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ] as unknown as TableData);
     }
   }
 }
-- 
2.35.1.windows.2

